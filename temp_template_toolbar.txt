        {/* Main toolbar content - 2 lines */}
        <div className="p-3 space-y-3">
          {/* First toolbar line */}
          <div className="flex items-center justify-center space-x-3 overflow-x-auto px-4">
            {/* Template Features - First section */}
            <div className="flex items-center space-x-2 border-r border-gray-400 dark:border-gray-500 pr-3">
              <button className="flex items-center space-x-1 px-2 py-1 hover:bg-gray-100 rounded transition-colors text-gray-700">
                <FileSpreadsheet className="w-6 h-6 text-blue-600" />
                <span className="text-xs">Template</span>
              </button>
              <button 
                onClick={saveTemplate}
                className="flex items-center space-x-1 px-2 py-1 hover:bg-gray-100 rounded transition-colors text-gray-700"
              >
                <Save className="w-5 h-5 text-purple-600" />
                <span className="text-xs">Save Template</span>
              </button>
              <button 
                onClick={() => createTemplateMutation.mutate()}
                className="flex items-center space-x-1 px-2 py-1 hover:bg-gray-100 rounded transition-colors text-gray-700"
              >
                <Plus className="w-5 h-5 text-purple-600" />
                <span className="text-xs">New Template</span>
              </button>
            </div>

            {/* File operations */}
            <div className="flex items-center space-x-2 border-r border-gray-400 dark:border-gray-500 pr-3">
              <button 
                className="flex items-center space-x-1 px-2 py-1 hover:bg-gray-100 rounded transition-colors text-gray-700"
                onClick={() => {
                  if (!editor) {
                    toast({ title: "Editor not ready", variant: "destructive" });
                    return;
                  }
                  try {
                    const content = editor.getHTML() || '';
                    navigator.clipboard.writeText(content);
                    toast({ title: "Content copied to clipboard" });
                  } catch (error) {
                    toast({ title: "Copy failed", description: "Please use Ctrl+C", variant: "destructive" });
                  }
                }}
              >
                <Copy className="w-6 h-6 text-orange-500" />
                <span className="text-xs">Copy</span>
              </button>
              <button 
                className="flex items-center space-x-1 px-2 py-1 hover:bg-gray-100 rounded transition-colors text-gray-700"
                onClick={() => {
                  if (!editor) {
                    toast({ title: "Editor not ready", variant: "destructive" });
                    return;
                  }
                  try {
                    if (editor.state.selection.empty) {
                      editor.chain().focus().selectAll().run();
                    }
                    const content = editor.getHTML() || '';
                    navigator.clipboard.writeText(content);
                    editor.chain().focus().deleteSelection().run();
                    toast({ title: "Content cut to clipboard" });
                  } catch (error) {
                    toast({ title: "Cut failed", description: "Please use Ctrl+X", variant: "destructive" });
                  }
                }}
              >
                <Scissors className="w-6 h-6 text-red-500" />
                <span className="text-xs">Cut</span>
              </button>
              <button 
                className="flex items-center space-x-1 px-2 py-1 hover:bg-gray-100 rounded transition-colors text-gray-700"
                onClick={async () => {
                  try {
                    const text = await navigator.clipboard.readText();
                    editor?.chain().focus().insertContent(text).run();
                    toast({ title: "Content pasted" });
                  } catch (err) {
                    toast({ title: "Paste failed", description: "Please use Ctrl+V instead", variant: "destructive" });
                  }
                }}
              >
                <ClipboardPaste className="w-6 h-6 text-green-500" />
                <span className="text-xs">Paste</span>
              </button>
              <button 
                className="flex items-center space-x-1 px-2 py-1 hover:bg-gray-100 rounded transition-colors text-gray-700 disabled:opacity-50"
                onClick={() => editor?.chain().focus().undo().run()}
                disabled={!editor?.can().undo()}
              >
                <Undo2 className="w-4 h-4 text-blue-500" />
                <span className="text-xs">Undo</span>
              </button>
              <button 
                className="flex items-center space-x-1 px-2 py-1 hover:bg-gray-100 rounded transition-colors text-gray-700 disabled:opacity-50"
                onClick={() => editor?.chain().focus().redo().run()}
                disabled={!editor?.can().redo()}
              >
                <Redo2 className="w-4 h-4 text-blue-500" />
                <span className="text-xs">Redo</span>
              </button>
            </div>

            {/* Font controls */}
            <div className="flex items-center space-x-2 border-r border-gray-400 dark:border-gray-500 pr-3">
              <Select value={fontFamily} onValueChange={setFontFamily}>
                <SelectTrigger className="w-36 border-none bg-transparent hover:bg-gray-100 text-gray-700">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Times New Roman">Times New Roman</SelectItem>
                  <SelectItem value="Arial">Arial</SelectItem>
                  <SelectItem value="Calibri">Calibri</SelectItem>
                  <SelectItem value="Georgia">Georgia</SelectItem>
                  <SelectItem value="Verdana">Verdana</SelectItem>
                  <SelectItem value="Helvetica">Helvetica</SelectItem>
                  <SelectItem value="Courier New">Courier New</SelectItem>
                  <SelectItem value="Comic Sans MS">Comic Sans MS</SelectItem>
                  <SelectItem value="Impact">Impact</SelectItem>
                  <SelectItem value="Trebuchet MS">Trebuchet MS</SelectItem>
                </SelectContent>
              </Select>
              
              <Select value={fontSize.toString()} onValueChange={(value) => setFontSize(parseInt(value))}>
                <SelectTrigger className="w-16 border-none bg-transparent hover:bg-gray-100 text-gray-700">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="8">8</SelectItem>
                  <SelectItem value="9">9</SelectItem>
                  <SelectItem value="10">10</SelectItem>
                  <SelectItem value="11">11</SelectItem>
                  <SelectItem value="12">12</SelectItem>
                  <SelectItem value="14">14</SelectItem>
                  <SelectItem value="16">16</SelectItem>
                  <SelectItem value="18">18</SelectItem>
                  <SelectItem value="20">20</SelectItem>
                  <SelectItem value="22">22</SelectItem>
                  <SelectItem value="24">24</SelectItem>
                  <SelectItem value="26">26</SelectItem>
                  <SelectItem value="28">28</SelectItem>
                  <SelectItem value="36">36</SelectItem>
                  <SelectItem value="48">48</SelectItem>
                  <SelectItem value="72">72</SelectItem>
                </SelectContent>
              </Select>
              
              <button 
                className="px-2 py-1 hover:bg-gray-100 rounded transition-colors text-gray-700 disabled:opacity-50"
                onClick={() => setFontSize(Math.min(72, fontSize + 2))}
                disabled={fontSize >= 72}
              >
                <Plus className="w-5 h-5 text-blue-600" />
              </button>
              <button 
                className="px-2 py-1 hover:bg-gray-100 rounded transition-colors text-gray-700 disabled:opacity-50"
                onClick={() => setFontSize(Math.max(8, fontSize - 2))}
                disabled={fontSize <= 8}
              >
                <Minus className="w-5 h-5 text-blue-600" />
              </button>
            </div>

            {/* Text formatting */}
            <div className="flex items-center space-x-1 border-r border-gray-400 dark:border-gray-500 pr-3">
              <button
                className={`px-2 py-1 rounded transition-colors ${
                  editor?.isActive('bold') 
                    ? 'bg-blue-100 text-blue-700' 
                    : 'hover:bg-gray-100 text-gray-700'
                }`}
                onClick={() => editor?.chain().focus().toggleBold().run()}
              >
                <Bold className="w-6 h-6 text-blue-600 font-bold" />
              </button>
              <button
                className={`px-2 py-1 rounded transition-colors ${
                  editor?.isActive('italic') 
                    ? 'bg-blue-100 text-blue-700' 
                    : 'hover:bg-gray-100 text-gray-700'
                }`}
                onClick={() => editor?.chain().focus().toggleItalic().run()}
              >
                <Italic className="w-6 h-6 text-blue-600" />
              </button>
              <button
                className={`px-2 py-1 rounded transition-colors ${
                  editor?.isActive('underline') 
                    ? 'bg-blue-100 text-blue-700' 
                    : 'hover:bg-gray-100 text-gray-700'
                }`}
                onClick={() => editor?.chain().focus().toggleUnderline().run()}
              >
                <UnderlineIcon className="w-6 h-6 text-blue-600" />
              </button>
              <input
                type="color"
                value={textColor}
                onChange={(e) => {
                  setTextColor(e.target.value);
                  editor?.chain().focus().setColor(e.target.value).run();
                }}
                className="w-8 h-6 border rounded cursor-pointer"
                title="Font Color"
                disabled={!editor}
              />
            </div>

            {/* Text alignment */}
            <div className="flex items-center space-x-1 border-r border-gray-400 dark:border-gray-500 pr-3">
              <button
                className={`px-2 py-1 rounded transition-colors ${
                  editor?.isActive({ textAlign: 'left' }) 
                    ? 'bg-blue-100 text-blue-700' 
                    : 'hover:bg-gray-100 text-gray-700'
                }`}
                onClick={() => editor?.chain().focus().setTextAlign('left').run()}
              >
                <AlignLeft className="w-6 h-6 text-green-600" />
              </button>
              <button
                className={`px-2 py-1 rounded transition-colors ${
                  editor?.isActive({ textAlign: 'center' }) 
                    ? 'bg-blue-100 text-blue-700' 
                    : 'hover:bg-gray-100 text-gray-700'
                }`}
                onClick={() => editor?.chain().focus().setTextAlign('center').run()}
              >
                <AlignCenter className="w-6 h-6 text-green-600" />
              </button>
              <button
                className={`px-2 py-1 rounded transition-colors ${
                  editor?.isActive({ textAlign: 'right' }) 
                    ? 'bg-blue-100 text-blue-700' 
                    : 'hover:bg-gray-100 text-gray-700'
                }`}
                onClick={() => editor?.chain().focus().setTextAlign('right').run()}
              >
                <AlignRight className="w-6 h-6 text-green-600" />
              </button>
              <button
                className={`px-2 py-1 rounded transition-colors ${
                  editor?.isActive({ textAlign: 'justify' }) 
                    ? 'bg-blue-100 text-blue-700' 
                    : 'hover:bg-gray-100 text-gray-700'
                }`}
                onClick={() => editor?.chain().focus().setTextAlign('justify').run()}
              >
                <AlignJustify className="w-6 h-6 text-green-600" />
              </button>
            </div>

            {/* Lists and indentation */}
            <div className="flex items-center space-x-1">
              <button
                className={`px-2 py-1 rounded transition-colors ${
                  editor?.isActive('bulletList') 
                    ? 'bg-blue-100 text-blue-700' 
                    : 'hover:bg-gray-100 text-gray-700'
                }`}
                onClick={() => editor?.chain().focus().toggleBulletList().run()}
              >
                <List className="w-6 h-6 text-purple-600" />
              </button>
              <button
                className={`px-2 py-1 rounded transition-colors ${
                  editor?.isActive('orderedList') 
                    ? 'bg-blue-100 text-blue-700' 
                    : 'hover:bg-gray-100 text-gray-700'
                }`}
                onClick={() => editor?.chain().focus().toggleOrderedList().run()}
              >
                <ListOrdered className="w-6 h-6 text-purple-600" />
              </button>
            </div>
          </div>

          {/* Second toolbar line */}
          <div className="flex items-center justify-center space-x-3 overflow-x-auto px-4">
            {/* Template specific controls */}
            <div className="flex items-center space-x-2 border-r border-gray-300 pr-4">
              <span className="text-sm text-gray-700">{template?.title || 'New Template'}</span>
            </div>
          </div>
        </div>